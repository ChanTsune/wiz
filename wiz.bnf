<syntax> ::= <decl> <syntax>
           | <decl>

<decl> ::= <var_decl>
         | <fun_decl>
        #  | <struct_decl>
        #  | <class_decl>
        #  | <enum_decl>
        #  | <protocol_decl>
        #  | <extension_decl>

<var_decl> ::= <value>
        | <variable>

<value> ::= "val" <white_space> <identifire> ":" <white_space> <type_name> <white_space> "=" <white_space> <expr>
          | "val" <white_space> <identifire> "=" <white_space> <expr>
<variable> ::= "var" <white_space> <identifire> ":" <white_space> <type_name> <white_space> "=" <white_space> <expr>
          | "var" <white_space> <identifire> "=" <white_space> <expr>

<fun_decl> ::= "fun" <white_spaces> <identifire> "(" <arg_defs> ")" <block>
             | "fun" <white_spaces> <identifire> "(" <arg_defs> ")" <white_spaces> "->" <white_spaces> <type_name> <block>

<arg_defs> ::= <arg_def> "," <arg_defs>
             | <arg_def> ","
             | <arg_def>

<arg_def> ::= <arg_label> <white_spaces> <arg_name> ":" <type_name>

<arg_label> ::= <identifire>
<arg_name> ::= <identifire> 

<block> ::= "{" <stmts> "}"

<stmts> ::= <stmt> | <stmt> <stmts>

<stmt> ::= <decl_stmt>
         | <expr_stmt>

<decl_stmt> ::= <decl> <eol>

<expr_stmt> ::= <expr> <eol>

<type_name> ::= <identifire>

<type_params> ::= <type_param> "," <type_params>
                | <type_param> ","
                | <type_param>

<type_param> ::= <identifire> ":" <type_names>
               | <identifire>
<type_names> ::= <type_name> "," <type_names>
               | <type_name> ","
               | <type_name>

<expr> ::= <disjunction_expr>

<disjunction_expr> ::= <conjunction_expr> ("||" <conjunction_expr>)*

<conjunction_expr> ::= <equality_expr> ("&&" <equality_expr>)*

<equality_expr> ::= <comparison_expr> (<equality_operator> <comparison_expr>)*

<equality_operator> ::= "==" | "!="

<comparison_expr> ::= <generic_call_like_comparison_expr> (<comparison_operator> <generic_call_like_comparison_expr>)*

<comparison_operator> ::= "<"  | ">"  | "<="  | ">="

<generic_call_like_comparison_expr> ::= <infix_operation_expr> <call_suffix>*

<infix_operation_expr> ::= <elvis_expr> ((<in_operator> <elvis_expr>) | (<is_operator> <type>))*

<elvis_expr> ::= <infix_function_call> (":?" <infix_function_call_expr>)*

<infix_function_call_expr> ::=  <range_expr> (<identifier> <range_expr>)*

<range_expr> ::= <additive_expr> (<range_operator> <additive_expr>)*

<range_operator> ::= "..." || "..<"

<additive_expr> ::= <multiplicative_expr> (<additive_operator> <multiplicative_expr>)*

<additive_operator> ::= "+" | "-"

<multiplicative_expr> ::= <as_expr> (<multiplicative_operator> <as_expr>)*

<multiplicative_operator> ::= "*" | "/" | "%"

<as_expr> ::= <prefix_expr> (<as_operator> <type>)*

<as_operator> ::= "as" | "as?"

<in_operator> ::= "in" | "!in"

<is_operator> ::= "is" | "!is"

<type> ::= <parenthesized_type> | <nullable_type> | <type_reference> | <function_type>

<parenthesized_type> ::= "(" <type> ")"
<nullable_type> ::= (<type_reference> | <parenthesized_type>) "?"
<type_reference> ::= <user_type>
<user_type> ::= <simple_user_type> ("." <simple_user_type>)*
<function_type> ::= (<receiver_type> ".")? <function_type_parameters> "->" <type>
<receiver_type> ::= <parenthesized_type> | <nullable_type> | <type_reference>
<function_type_parameters> ::= '(' (<parameter> | <type>)? (',' (<parameter> | <type>))* ','? ')'

<parameter> ::= <identifier> ":" <type>

<call_suffix> ::= <type_arguments>? ((<value_arguments>? <annotated_lambda>) | <value_arguments>)

<type_arguments> ::= "<" <type> ("," <type>)* "," ">"

<value_arguments> ::= "(" <value_argument> ("," <value_argument>)* "," ")"

<value_argument> ::= (<identifier> "=")? "*"? <expr>

<annotated_lambda> ::= <label>? <lambda_literal>

<label> ::= 

<prefix_expr> ::= <prefix_operator> <postfix_expr>
                | <postfix_expr>

<postfix_expr> ::= <primary_expr>
                | <postfix_expr> <postfix_operator>
                # | function_call_expression
                # | initializer_expression
                # | explicit_member_expression
                # | postfix_self_expression
                # | subscript_expression
                # | forced_value_expression
                # | optional_chaining_expression

<binary_expr> ::= <white_space> <operator> <white_space> <expr>

<primary_expr> ::= <name_expr>
                 | <literal_expr>
                 | <parenthesized_expr>
        # | <list>
        # | <tuple>
        # | <dict>
        # | <string_builder>
        # | <call>
        # | <if>
        # | <when>
                | <function_literal>
        # | <return>
        # | <member>
        # | <for>
        # | <while>
        # | <break>
        # | <continue>
        # | <unaryop>
        # | <subscript>

<parenthesized_expr> ::= "(" <white_spaces> <expr> <white_spaces> ")"


<name_expr> ::= <identifire>

<literal_expr> ::= <integer_literal>
            # | <floating_point_literal>
            # | <string_literal>
            # | <boolean_literal>
            # | <null_literal>

<integer_literal> ::= <digits>
# <floating_point_literal> ::=
# <string_literal> ::= 
# <boolean_literal> ::=
# <null_literal> ::=

<function_literal> ::= <lambda_literal>

<lambda_literal> ::= "{" <stmts> "}"

<postfix_operator> ::= "!"

<digits> ::= <digit> <digits>
           | <digit>
<digit> ::= "0-9"

<identifire> ::= <identifire_head> | <identifire_head> <identifire_items>
<identifire_items> ::= <identifire_item> | <identifire_item> <identifire_items>
<identifire_head> ::= "a-zA-Z" | "_"
<identifire_item> ::= <identifire_head> | "_" | <digit>

<white_spaces> ::= <white_space> <white_spaces>
                 | <white_space>
<white_space> ::= " " | <eol>

<eol> = "\n"
