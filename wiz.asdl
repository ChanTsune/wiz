-- ASDL's 4 builtin types are:
-- identifier, int, string, constant

module wiz
{
    module = Module(string name, file* files)
    file = File(decl* body)

    decl = Var(var var)
         | Fun(fun fun)
         | Struct(struct struct)
         | Protocol(protocol protocol)
         | Extension(extension extension)

    stmt = DeclStmt(decl decl)
         | ExprDecl(expr expr)
         | Return(expr value)

    var = Value(string name, type_name? type_name, expr value)
        | Variable(string name, type_name? type_name, expr value)

    fun = Function(string name, arg_def* args, block body, type_name? return_type)

    arg_def = ArgDef(stirng label, string name, type_name type)

    struct = Struct(type_name name, decl* members)
        | Class(type_name name, decl* members)

    protocol = Protocol(type_name name, decl* fun)

    extension = Extension(type_name target, type_name* protocol_names, fun* functions)

    expr = Name(string name)
         | Constant(string value, string kind)
         | BinOp(expr left, string kind, expr right)
         | Subscript(expr ratget, expr idx)
         | UnaryOp(expr target, string kind)
         | List(expr* exprs)
         | Tuple(expr* exprs)
         | Dict(key_value_pair* pairs)
         | StringBuilder(expr* exprs)
         | Call(expr target, arg* args, lambda? tailing_lambda)
         | If(if if)
         | When(when when)
         | Lambda(lambda lambda)
     block = Block(stmt* stmts)
     key_value_pair = KeyValuePair(expr key, expr value)
     arg = Arg(stirng? name, expr value)
     if = If(expr condition, block body, else? else)
     when = ConditionWhen(condition_block_pair* pairs)
          | TypeWhen(expr value, type_block_pair* pairs)
          | CaseWhen(expr value, case_block_pair* pairs)
     type_block_pair = TypeBodyPair(type_name type_name, block body)
     case_block_pair = CaseBlockPair(expr value, block body)
     condition_block_pair = ConditionBodyPair(expr condition, block body)
     lambda = Lambda(block body)

     type_name = TypeName(string name, type_name type_params)
     type_param = TypeParam(string param_name, type_name* type_constraint)
}
