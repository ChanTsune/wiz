// domain
val AF_UNIX: Size = 1
val AF_INET: Size = 2
val AF_INET6: Size = 30

// types
val SOCK_STREAM: Size = 1
val SOCK_DGRAM: Size = 2
val SOCK_RAW: Size = 3


#[no_mangle]
fun accept(_ socket: Size, _ sockadder: *UInt8, _ socklen: *USize): Size
// fun accept(_ socket: c_int, _sockaddr :*sockaddr , socklen_t * __restrict): c_int

#[no_mangle]
fun bind(_ socket: Size, _ sockaddr: *UInt8, _ socklen: USize): Size
// fun bind(_ socket: c_int, _ sockaddr: *sockaddr, socklen_t): c_int

#[no_mangle]
fun connect(_ socket: Size, _ addr: *UInt8, _ len: USize): Size
// fun connect(_ socket: c_int, _ addr: *sockaddr, socklen_t): c_int;

#[no_mangle]
fun listen(_ socket: Size, _ backlog: Size): Size
// fun listen(_ socket: c_int, _ backlog: c_int): c_int

#[no_mangle]
fun socket(_ domain: Size, _ type: Size, _ protocol: Size): Size
// fun socket(_ domain: c_int, type: c_int, _ protocol: c_int): c_int

#[no_mangle]
fun send(_ socket: Size, _ buf: *UInt8, _ len: USize, _ flags: Size): Size
// ssize_t send(int, const void *, size_t, int)

#[no_mangle]
fun recv(_ socket: Size, _ buf: *UInt8, _ len: USize, _ flags: Size): Int64
// ssize_t recv(int, void *, size_t, int)
