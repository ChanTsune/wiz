use libc::string::*
use std::collection::vector::UInt8Vector
use std::format::Printable
use std::format::DebugPrintable

struct String {
    val buffer: UInt8Vector

    fun new(_ literal: &str): Self {
        var s = String::empty()
        s.push(literal)
        return s
    }

    fun from(_ literal: &str): Self {
        var s = String::with(capacity: strlen(literal))
        s.push(literal)
        return s
    }

    fun empty(): Self {
        return Self(buffer: UInt8Vector::new())
    }

    fun with(capacity: USize): Self {
        return Self(buffer: UInt8Vector::with(capacity))
    }

    fun push(&self, _ s: &str): Unit {
        val sLength = strlen(s)
        var i = 0
        while sLength > i {
            val t = s[i]
            self.buffer.push(element:t)
            i += 1
        }
    }

    fun join(&self, _ s: String): Unit {
        self.buffer.extends(s.buffer)
    }

    fun length(&self): UInt64 {
        return self.buffer.length
    }

    fun isEmpty(&self): Bool {
        return self.buffer.isEmpty()
    }

    fun index(&self, of pattern: String): USize {
        if self.length() < pattern.length() {
            return -1 as USize
        }
        var n: USize = 0
        val end: USize = self.length() - pattern.length()
        while n <= end {
            val result = memcmp(self.buffer.ptr + n, pattern.buffer.ptr, pattern.buffer.length as USize)
            if result == 0 {
                return n
            }
            n += 1
        }
        return -1 as USize
    }

    fun startsWith(&self, _ s: &str): Bool {
        val sLength = strlen(s)
        if self.length() < sLength {
            return false
        }
        return memcmp(self.buffer.ptr, s, sLength) == 0
    }

    fun endsWith(&self, _ s: &str): Bool {
        val sLength = strlen(s)
        if self.length() < sLength {
            return false
        }
        return memcmp(self.buffer.ptr + self.length() - sLength, s, sLength) == 0
    }

    fun subString(&self, start: USize, end: USize): String {
        if start >= end {
            return String::empty()
        }
        val vec = UInt8Vector::with(capacity: end - start)
        memcpy(vec.ptr, self.buffer.ptr + start, end - start)
        vec.length = end - start
        return Self(buffer: vec)
    }

    fun removed(&self, suffix: &str): String {
        if self.endsWith(suffix) {
            val end = (self.length() as USize) - strlen(suffix)
            return self.subString(start: 0, end: end)
        }
        return self.clone()
    }
}

extension String: Printable {
    fun description(&self): String {
        return self.clone()
    }
}

extension String: DebugPrintable {
    fun debugDescription(&self): Self {
        return self.clone()
    }
}

extension String: Clone {
    fun clone(&self): String {
        return Self(buffer: self.buffer.clone())
    }
}

extension String: Equals {
    fun equals(&self, _ other: &Self): Bool {
        return self.buffer.equals(other.buffer)
    }
}

#[test]
fun test_string_new() {
    var s = String::new("Hello, World!")
    assert(s.length() == 13)
}

#[test]
fun test_string_empry() {
    var s = String::empty()
    assert(s.length() == 0)
}

#[test]
fun test_string_isEmpty() {
    var s = String::empty()
    assert(s.isEmpty())
}

#[test]
fun test_string_push_str() {
    var s = String::empty()
    s.push("Hello, World!")
    assert(s.length() == 13)
}

#[test]
fun test_string_join_String() {
    val world = String::new("World!")
    var s = String::new("Hello, ")
    s.join(world)
    assert(s.length() == 13)
}

#[test]
fun test_string_equals() {
    var s = String::new("Hello, World!")
    var s2 = String::new("Hello, World!")
    assert(s.equals(s2))
}

#[test]
fun test_string_index() {
    val s = String::new("0123456789")

    val ptn = String::new("6")
    assert(s.index(of: ptn) == 6)

    val ptn = String::new("45")
    assert(s.index(of: ptn) == 4)

    val ptn = String::new("9")
    assert(s.index(of: ptn) == 9)

    val ptn = String::new("a")
    assert(s.index(of: ptn) == (-1 as USize))

    val s = String::empty()

    val ptn = String::new("a")
    assert(s.index(of: ptn) == -1)
}

#[test]
fun test_string_startsWith() {
    var s = String::new("Hello, World!")
    assert(s.startsWith("Hello"))
    assert(!s.startsWith("World"))
}

#[test]
fun test_string_startsWith_empty() {
    var empry = String::empty()
    assert(empry.startsWith(""))
    assert(!empry.startsWith("Hello"))

    var s = String::new("Hello, World!")
    assert(s.startsWith(""))
}

#[test]
fun test_string_endsWith() {
    var s = String::new("Hello, World!")
    assert(s.endsWith("World!"))
    assert(!s.endsWith("Hello"))
}

#[test]
fun test_string_endsWith_empty() {
    var empry = String::empty()
    assert(empry.endsWith(""))
    assert(!empry.endsWith("Hello"))

    var s = String::new("Hello, World!")
    assert(s.endsWith(""))
}

#[test]
fun test_string_subString() {
    val s = String::new("0123456789")
    val sub = s.subString(start: 0, end: 3)
    val expected = String::new("012")
    assert(sub.equals(expected))

    val sub = s.subString(start: 1, end: 8)
    val expected = String::new("1234567")
    assert(sub.equals(expected))

    val sub = s.subString(start: 2, end: 0)
    val expected = String::empty()
    assert(sub.equals(expected))
}

#[test]
fun test_string_removed_suffix() {
    val s = String::from("0123456789")
    val removed = s.removed(suffix: "89")
    val expected = String::from("01234567")
    assert(removed.equals(expected))

    val removed = s.removed(suffix: "0123")
    val expected = String::from("0123456789")
    assert(removed.equals(expected))
}
