use std::collection::vector::UInt8Vector
use std::format::Printable
use std::format::DebugPrintable

struct String {
    val buffer: UInt8Vector

    fun new(_ literal: &str): Self {
        var buffer = UInt8Vector::new()
        val literalLength = strlen(literal)
        var i = 0
        while literalLength > i {
            val t = literal[i]
            buffer.push(element:t)
            i += 1
        }
        return Self(buffer: buffer)
    }

    fun empty(): Self {
        return Self(buffer: UInt8Vector::new())
    }

    fun length(&self): UInt64 {
        return self.buffer.length
    }
}

extension String: Printable {
    fun description(&self): String {
        return self.clone()
    }
}

extension String: DebugPrintable {
    fun debugDescription(&self): Self {
        return self.clone()
    }
}

extension String: Clonable {
    fun clone(&self): String {
        return Self(buffer: self.buffer.clone())
    }
}
