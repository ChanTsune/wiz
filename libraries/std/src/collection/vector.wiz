use std::memory::allocator::DefaultAllocator

struct UInt8Vector {
    var ptr: *UInt8
    var length: UInt64
    var capacity: UInt64
    val allocator: DefaultAllocator

    fun new(): Self {
        val allocator = DefaultAllocator::new()
        val ptr = allocator.allocate(0)
        val capacity: UInt64 = 0
        val length: UInt64 = 0
        return Self(ptr: ptr, length: length, capacity: capacity, allocator: allocator)
    }

    fun isEmpty(&self): Bool {
        return self.length == 0
    }

    fun push(&self, element: UInt8): Unit {
        if self.capacity <= self.length {
            val newCapacity = if self.capacity == 0 { 4 } else { self.capacity * 2 }
            self.reserve(newCapacity)
        }
        self.ptr[self.length] = element
        self.length += 1
    }

    fun pop(&self): UInt8 {
        if self.isEmpty() {
            return -1 as UInt8
        }
        val r = self.ptr[self.length - 1]
        self.length -= 1
        return r
    }

    fun insert(&self, into index: UInt64, element: UInt8): Unit {
        if self.length <= index {
            self.push(element: element)
        } else {
            if self.capacity <= self.length {
                val newCapacity = if self.capacity == 0 { 4 } else { self.capacity * 2 }
                self.reserve(newCapacity)
            }
            self.length += 1
            memmove(self.ptr + index, self.ptr + index - 1, self.length - index)
            self.ptr[index] = element
        }
    }

    fun remove(&self, index: UInt64): UInt8 {
        if self.length == index - 1 {
            return self.pop()
        }
        val t = self.ptr[index]
        memmove(self.ptr + index, self.ptr + index + 1, self.length - index)
        self.length -= 1
        return t
    }

    fun get(&self, index: UInt64): UInt8 {
        if self.length <= index {
            return -1 as UInt8
        }
        return self.ptr[index]
    }

    fun set(&self, index: UInt64, element: UInt8): Unit {
        if self.length <= index {
            return
        }
        self.ptr[index] = element
    }

    fun swap(&self, index: UInt64, element: UInt8): UInt8 {
        if self.length <= index {
            return element
        }
        val t = self.ptr[index]
        self.ptr[index] = element
        return t
    }

    fun clear(&self): Unit {
        self.length = 0
    }

    fun shinkTo(&self, minSize: UInt64): Unit {
        self.ptr = self.allocator.reallocate(self.ptr, minSize)
        self.capacity = minSize
    }

    fun shinkToFit(&self): Unit {
        self.shinkTo(minSize: self.length)
    }

    fun reserve(&self, newCapacity: UInt64): Unit {
        self.ptr = self.allocator.reallocate(self.ptr, newCapacity)
        self.capacity = newCapacity
    }
}

extension UInt8Vector: Clonable {
    fun clone(&self): Self {
        val ptr = self.allocator.allocate(self.length)
        memcpy(ptr, self.ptr, self.length)
        return Self(ptr: ptr, length: self.length, capacity: self.capacity, allocator: self.allocator)
    }
}
