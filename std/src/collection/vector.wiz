struct UInt8Vector {
    var ptr: UnsafePointer<UInt8>
    var length: UInt64
    var capacity: UInt64

    init() {
        self.capacity = 0
        self.ptr = malloc(0)
        self.length = 0
    }

    fun isEmpty(&self): Bool {
        return self.length == 0
    }

    fun push(&self, element: UInt8): Unit {
        if self.capacity <= self.length {
            val newCapacity = if self.capacity == 0 { 4 } else { self.capacity * 2 }
            self.ptr = realloc(self.ptr, newCapacity)
        }
        self.ptr[self.length] = element
        self.length += 1
    }

    fun pop(&self): UInt8 {
        if self.isEmpty() {
            return -1 as UInt8
        }
        val r = self.ptr[self.length - 1]
        self.length -= 1
        return r
    }

}
